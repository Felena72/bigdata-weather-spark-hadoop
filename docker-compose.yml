services:
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    ports:
      - "9870:9870"  # HDFS Web UI
      - "9000:9000"  # HDFS RPC
    environment:
      - CLUSTER_NAME=test-cluster
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    volumes:
      - namenode-data:/hadoop/dfs/namenode
      - ./data:/data  # Mount local data
    networks:
      - hadoop-net

  datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode1
    ports:
      - "9864:9864"  # Datanode Web UI
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - CORE_CONF_hadoop_hdfs_replication=2
      - dfs.datanode.hostname=localhost  # Ensures accessibility via localhost
    volumes:
      - datanode1-data:/hadoop/dfs/datanode
    networks:
      - hadoop-net
    depends_on:
      - namenode

  datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode2
    ports:
      - "9865:9864"  # Datanode Web UI (port 9865 for the second datanode)
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - CORE_CONF_hadoop_hdfs_replication=2
      - dfs.datanode.hostname=localhost  # Ensures accessibility via localhost
    volumes:
      - datanode2-data:/hadoop/dfs/datanode
    networks:
      - hadoop-net
    depends_on:
      - namenode

  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    ports:
      - "8088:8088"  # YARN Web UI
    networks:
      - hadoop-net
    depends_on:
      - namenode

  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager1
    networks:
      - hadoop-net
    depends_on:
      - resourcemanager

  nodemanager2:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager2
    networks:
      - hadoop-net
    depends_on:
      - resourcemanager

  spark-master:
    image: bde2020/spark-master:3.1.1-hadoop3.2
    container_name: spark-master
    ports:
      - "7077:7077"  # Spark Master Port
      - "8080:8080"  # Spark Master UI
    environment:
      - SPARK_MODE=master
    volumes:
      - ./pyspark_app/weather_analysis.py:/app/weather_analysis.py
    networks:
      - hadoop-net

  spark-worker1:
    image: bde2020/spark-worker:3.1.1-hadoop3.2
    container_name: spark-worker1
    ports:
      - "8081:8081"  # Spark Worker UI
    environment:
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=2g
    networks:
      - hadoop-net
    depends_on:
      - spark-master

  spark-worker2:
    image: bde2020/spark-worker:3.1.1-hadoop3.2
    container_name: spark-worker2
    ports:
      - "8082:8081"  # Spark Worker UI (using port 8082 on the host)
    environment:
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=2g
    networks:
      - hadoop-net
    depends_on:
      - spark-master

  jupyter:
    image: jupyter/pyspark-notebook
    container_name: jupyter
    ports:
      - "8888:8888"  # Jupyter Notebook UI
    environment:
      - SPARK_MASTER=spark://spark-master:7077
    volumes:
      - ./notebooks:/home/jovyan/work
    networks:
      - hadoop-net
    depends_on:
      - spark-master

volumes:
  namenode-data:
  datanode1-data:
  datanode2-data:

networks:
  hadoop-net:
